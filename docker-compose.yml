version: '3.8'

services:
  web:
    build: .
    command: >
      sh -c "
        echo 'Waiting for postgres...' &&
        while ! nc -z db 5432; do
          sleep 1
        done &&
        echo 'PostgreSQL started' &&
        python manage.py migrate &&
        python manage.py collectstatic --noinput &&
        python manage.py runserver 0.0.0.0:8000
      "
    volumes:
      - .:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    ports:
      - "8000:8000"
    environment:
      - DJANGO_SETTINGS_MODULE=testroad.settings.development
      - DJANGO_SECRET_KEY=django-insecure-dev-key-for-development-only
      - DJANGO_DEBUG=True
      - POSTGRES_DB=testroad
      - POSTGRES_USER=testroad_user
      - POSTGRES_PASSWORD=testroad_password
      - POSTGRES_HOST=db
    depends_on:
      db:
        condition: service_healthy

  db:
    image: postgres:15
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./docker/postgres/postgresql.conf:/etc/postgresql/postgresql.conf
      - ./backups:/backups
      - ./docker/postgres/backup.sh:/usr/local/bin/backup.sh
    environment:
      - POSTGRES_DB=testroad
      - POSTGRES_USER=testroad_user
      - POSTGRES_PASSWORD=testroad_password
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8
      - PGDATA=/var/lib/postgresql/data/pgdata
    command: postgres -c 'config_file=/etc/postgresql/postgresql.conf'
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U testroad_user -d testroad" ]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: always
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  backup:
    image: postgres:15
    volumes:
      - ./backups:/backups
      - ./docker/postgres/backup.sh:/usr/local/bin/backup.sh
    environment:
      - PGHOST=db
      - POSTGRES_DB=testroad
      - POSTGRES_USER=testroad_user
      - POSTGRES_PASSWORD=testroad_password
    entrypoint: []
    command: |
      sh -c '
        apt-get update &&
        apt-get install -y cron &&
        chmod +x /usr/local/bin/backup.sh &&
        echo "0 3 * * * /usr/local/bin/backup.sh" > /etc/cron.d/backup-cron &&
        chmod 0644 /etc/cron.d/backup-cron &&
        cron -f
      '
    depends_on:
      db:
        condition: service_healthy
    restart: always

volumes:
  postgres_data:
  static_volume:
  media_volume:
